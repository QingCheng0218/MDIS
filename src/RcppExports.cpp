// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RcppArmadillo.h"
#include <iostream>

using namespace Rcpp;
using namespace arma;
using namespace std;

// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::export]]

// Leastsquare
void Leastsquare(arma::mat X, arma::vec y, vec& bh, vec& residual);
RcppExport SEXP _MDIS_Leastsquare(SEXP XSEXP, SEXP ySEXP, SEXP bhSEXP, SEXP residualSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec& >::type bh(bhSEXP);
    Rcpp::traits::input_parameter< vec& >::type residual(residualSEXP);
    Leastsquare(X, y, bh, residual);
    return R_NilValue;
END_RCPP
}
// statfun1
List statfun1(mat X, vec y);
RcppExport SEXP _MDIS_statfun1(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(statfun1(X, y));
    return rcpp_result_gen;
END_RCPP
}
// comb
imat comb(int p);
RcppExport SEXP _MDIS_comb(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(comb(p));
    return rcpp_result_gen;
END_RCPP
}
// MDIS
List MDIS(mat X, vec y);
RcppExport SEXP _MDIS_MDIS(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(MDIS(X, y));
    return rcpp_result_gen;
END_RCPP
}
// jcisfun
double jcisfun(mat X, vec y);
RcppExport SEXP _MDIS_jcisfun(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(jcisfun(X, y));
    return rcpp_result_gen;
END_RCPP
}
// JCIS
List JCIS(imat at, mat X, vec y);
RcppExport SEXP _MDIS_JCIS(SEXP atSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< imat >::type at(atSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(JCIS(at, X, y));
    return rcpp_result_gen;
END_RCPP
}
// DIS
List DIS(imat at, mat X, vec y);
RcppExport SEXP _MDIS_DIS(SEXP atSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< imat >::type at(atSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(DIS(at, X, y));
    return rcpp_result_gen;
END_RCPP
}
// proposal
uvec proposal(imat at, mat X, vec y, int Yres);
RcppExport SEXP _MDIS_proposal(SEXP atSEXP, SEXP XSEXP, SEXP ySEXP, SEXP YresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< imat >::type at(atSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type Yres(YresSEXP);
    rcpp_result_gen = Rcpp::wrap(proposal(at, X, y, Yres));
    return rcpp_result_gen;
END_RCPP
}
// proploop
List proploop(mat S, mat B, vec beta, int n, uword IterMax);
RcppExport SEXP _MDIS_proploop(SEXP SSEXP, SEXP BSEXP, SEXP betaSEXP, SEXP nSEXP, SEXP IterMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< uword >::type IterMax(IterMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(proploop(S, B, beta, n, IterMax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MDIS_Leastsquare", (DL_FUNC) &_MDIS_Leastsquare, 4},
    {"_MDIS_statfun1", (DL_FUNC) &_MDIS_statfun1, 2},
    {"_MDIS_comb", (DL_FUNC) &_MDIS_comb, 1},
    {"_MDIS_MDIS", (DL_FUNC) &_MDIS_MDIS, 2},
    {"_MDIS_jcisfun", (DL_FUNC) &_MDIS_jcisfun, 2},
    {"_MDIS_JCIS", (DL_FUNC) &_MDIS_JCIS, 3},
    {"_MDIS_DIS", (DL_FUNC) &_MDIS_DIS, 3},
    {"_MDIS_proposal", (DL_FUNC) &_MDIS_proposal, 4},
    {"_MDIS_proploop", (DL_FUNC) &_MDIS_proploop, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MDIS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
