# z = rnorm(1, 0, 0.25);
# rho = atanh(z); # overlap
rhotrue = 0.2;
Re = matrix(c(1, rhotrue, rhotrue, 1), ncol = 2, nrow = 2);
SSmean = c(mean1, mean2)
# #
SScov = diag(c(S1, S2))%*%kronecker(Re, R)%*%diag(c(S1, S2));
SStat = as.vector(rmvnorm(1, mean=SSmean, sigma=SScov, method="chol"));
gammah = SStat[1:p];
Gammah = SStat[(p+1):(2*p)];
se1 = S1;
se2 = S2;
library(MCMCpack)
IterMax = 2000
constr = 0;
# gibbs3fun <- function(Gammah, se2, gammah, se1, R, IterMax){
#
Betares <- rhores <- rep(0, IterMax);
beta0 <- 0.01;
sgga2 <- 1;
sgal2 <- 1;
agm <- bgm <- aal <- bal <- 0.001;
mu <- muA <- rep(0.01, p);
rho = 0
sG2 = se2*se2;
sg2 = se1*se1;
GinvsG2 <- Gammah/sG2; # Gammah *S_2^(-2)
ginvsg2 <- gammah/sg2; # gammah*S_1^(-2)
Ginvsg1G1 <- Gammah/(se1*se2); # Gammah*S_1^(-1)*S_2^(-1)
ginvsg1G1 <- gammah/(se1*se2); # gammah*S_1^(-1)*S_2^(-1)
insGRinsG <- diag(1/se2)%*%R%*%diag(1/se2) # S_2^(-1)RS_2^(-1)
insgRinsg <- diag(1/se1)%*%R%*%diag(1/se1) # S_1^(-1)RS_1^(-1)
insgRinsG <- diag(1/se1)%*%R%*%diag(1/se2) # S_1^(-1)RS_2^(-1)
diaginsGRinsG <- diag(insGRinsG); #diag(S_2^(-1)RS_2^(-1))
diaginsgRinsg <- diag(insgRinsg); # diag(S_1^(-1)RS_1^(-1))
RinsginsG <- diag(R)/(se1*se2); # diag(S_1^(-1)RS_2^(-1))
Rins <- R%*%(diag(1/se1)); # RS_1^{-1}
Rins2 <- R%*%(diag(1/se2)); # RS_2^{-1}
Rinsgmu <- Rins%*%mu; # RS_1^{-1}gamma
RinsGmu <- Rins2%*%mu; # RS_2^{-1}gamma
RinsGmuA <- Rins2%*%muA; # RS_2^{-1}alpha
iR = solve(R);
# iSiRiS1 = diag(1/se1)%*%iR%*%diag(1/se1);
# iSiRiS2 = diag(1/se2)%*%iR%*%diag(1/se2);
# iSiRiS12 = diag(1/se1)%*%iR%*%diag(1/se2);
#
# ghiSiRiSgh = gammah%*%iSiRiS1%*%gammah;
# GhiSiRiSGh = Gammah%*%iSiRiS2%*%Gammah;
# ghiSiRiSGh = gammah%*%iSiRiS12%*%Gammah;
zhat = cbind(diag(1/se1)%*%gammah, diag(1/se2)%*%Gammah);
Reinv <- diag(2);
iter = 1;
# U = runif(IterMax, min = 0, max = 1);
while(iter<=IterMax){
inrho2 <- 1. / (1 - rho^2);
#update gamma
v2 = 1./(inrho2*diaginsgRinsg + inrho2*beta0^2*diaginsGRinsG - 2*inrho2*rho*beta0*RinsginsG + 1./sgga2);
for(j in 1:p){
tmp1 = Rinsgmu - Rins[, j]*mu[j];
tmp2 = RinsGmu - Rins2[, j]*mu[j];
RinSmujj = Rinsgmu[j] - R[j, j]*mu[j] / se1[j];
RinSmujj2 = RinsGmu[j] - R[j, j]*mu[j] / se2[j];
mu1 = ginvsg2[j] + beta0*GinvsG2[j] - rho*Ginvsg1G1[j] - rho*beta0*ginvsg1G1[j] + (rho/se1[j] - beta0/se2[j])*RinsGmuA[j];
mu2 = (rho*beta0/se2[j] - 1/se1[j])*RinSmujj + (rho*beta0/se1[j] - beta0^2/se2[j])*RinSmujj2;
mu0 = inrho2*(mu1 + mu2)*v2[j];
mu[j] = rnorm(1, mean = mu0, sd = sqrt(v2[j]));
# mu[j] = mu0;
Rinsgmu = tmp1 + Rins[, j]*mu[j];
RinsGmu = tmp2 + Rins2[, j]*mu[j];
}
# update alpha
v2A = 1./(inrho2*diaginsGRinsG + 1./sgal2);
for(k in 1:p){
tmp3 = RinsGmuA - Rins2[, k]*muA[k];
RinSmuAkk = RinsGmuA[k] - R[k, k]*muA[k]/se2[k];
muA1 = GinvsG2[k] - beta0/se2[k]*RinsGmu[k] - rho*ginvsg1G1[k] + rho/se2[k]*Rinsgmu[k];
muA2 = 1./se2[k]*RinSmuAkk;
muA0 = inrho2*(muA1 - muA2)*v2A[k];
muA[k] = rnorm(1, mean = muA0, sd = sqrt(v2A[k]));
# muA[k] = muA0;
RinsGmuA = tmp3 + Rins2[, k]*muA[k];
}
# update beta0
sig2b = 1./(t(mu)%*%insGRinsG%*%mu);
mub = (t(GinvsG2)%*%mu - t(muA)%*%insGRinsG%*%mu - rho*ginvsg1G1%*%mu + rho*t(mu)%*%insgRinsG%*%mu)*sig2b;
beta0 = rnorm(1, mean = mub, sd = sqrt(sig2b));
Betares[iter] <- beta0;
beta0 = as.numeric(mub);
# update sgga2
tagm <- agm + p/2;
tbgm <- sum(mu^2)/2 + bgm;
sgga2 <- rgamma(1, shape = tagm, scale = 1 / tbgm)^{-1};
# update sgal2
taal = aal + p/2;
tbal = sum(muA^2)/2 + bgm;
sgal2 =  rgamma(1, shape = taal, scale = 1 / tbal)^{-1};
if(constr==1){
rho = rhotrue;
}else{
# Parameter Expansion
# Sample D from the prior
id2 <- rgamma(2, shape = (2+1)/2, scale = 2/diag(Reinv))
D <- diag(1/sqrt(id2))
# # sample Re
zmean = cbind(Rinsgmu, beta0*RinsGmu + RinsGmuA);
tmp = (zhat - zmean)%*%D;
S = diag(2) + t(tmp)%*%iR%*%tmp;
v <-  2 + p;
Sig <- riwish(v, S)
D <- diag(sqrt(diag(Sig)))
Dinv <- solve(D)
Re <- Dinv%*%Sig%*%Dinv;
Reinv <- D%*%solve(Sig)%*%D
# compute rho
rho = Re[1, 2];
}
rhores[iter] = rho;
iter <- iter + 1;
# print(iter)
}
par(mfrow = c(2,1))
plot(rhores);
abline(h = rhotrue, col = "red");
cat("estimate:", mean(rhores[-c(1:1000)]), "true:", rhotrue, "\n")
plot(Betares);
abline(h = b0, col = "red");
cat("estimate:", mean(Betares[-c(1:1000)]), "true:", b0, "\n")
#   return(list(Betares = Betares, rhores = rhores));
# }
library("mvtnorm")
set.seed(2019)
b0 = 0;
rho0 = 0;
L = 200;
M = 50;
n1 = 20000;
n2 = 20000;
p = M*L;
# h2g = 0.1;
# h2a = 0.05;
# sigma2x = 2*h2g/(p*(1 - h2g));
# sigma2y = h2a*(2 + beta0^2*(p*sigma2x + 2))/(p*(1 - h2a));
sigma2x = 1/n1; sigma2y = 1/n2;
# sigma2x = sigma2y = 5e-5;
maf1 = runif(p, 0.05, 0.5);
maf2 = runif(p, 0.05, 0.5);
# ----------------------------------------
# Generate true effect size
S0 = rho0^(abs(matrix(rep(c(1:M),each=M),ncol=M,byrow=T) -matrix(rep(c(1:M),each=M),ncol=M)));
R = kronecker(diag(L),S0);
rate = 0.1;
ind = sample(1:p, rate*p);
gamma = rep(0, p);
gamma[ind] = rnorm(rate*p, 0.1, sqrt(sigma2x));
# gamma = rnorm(p, 0, sqrt(sigma2x));
alpha = rnorm(p, 0, sqrt(sigma2y));
# alpha = rep(0, p);
Gamma = b0*gamma + alpha;
# gamma = gamma/(sqrt(2*maf1*(1 - maf1)));
# Gamma = Gamma/sqrt(2*maf2*(1 - maf2));
S1 = 1./sqrt(2*n1*maf1*(1 - maf1));
S2 = 1./sqrt(2*n2*maf2*(1 - maf2));
# S1 = rep(sqrt(1./(2*n1)), p);
# S2 = rep(sqrt(1./(2*n2)), p);
# ----------------------------------------
# Generate observed GWAS summary statistics
mean1 = diag(S1)%*%R%*%diag(1./S1)%*%gamma;
mean2 = diag(S2)%*%R%*%diag(1./S2)%*%Gamma;
#cov1 = diag(S1)%*%R%*%diag(S1);
#cov2 = diag(S2)%*%R%*%diag(S2);
#gammah = as.vector(rmvnorm(1, mean=mean1, sigma=cov1, method="chol"));
#Gammah = as.vector(rmvnorm(1, mean=mean2, sigma=cov2, method="chol"));
# gammah = mean1;
# Gammah = mean2;
# z = rnorm(1, 0, 0.25);
# rho = atanh(z); # overlap
rhotrue = 0.2;
Re = matrix(c(1, rhotrue, rhotrue, 1), ncol = 2, nrow = 2);
SSmean = c(mean1, mean2)
# #
SScov = diag(c(S1, S2))%*%kronecker(Re, R)%*%diag(c(S1, S2));
SStat = as.vector(rmvnorm(1, mean=SSmean, sigma=SScov, method="chol"));
gammah = SStat[1:p];
Gammah = SStat[(p+1):(2*p)];
se1 = S1;
se2 = S2;
library(MCMCpack)
IterMax = 2000
constr = 0;
# gibbs3fun <- function(Gammah, se2, gammah, se1, R, IterMax){
#
Betares <- rhores <- rep(0, IterMax);
beta0 <- 0.01;
sgga2 <- 1;
sgal2 <- 1;
agm <- bgm <- aal <- bal <- 0.001;
mu <- muA <- rep(0.01, p);
rho = 0
sG2 = se2*se2;
sg2 = se1*se1;
GinvsG2 <- Gammah/sG2; # Gammah *S_2^(-2)
ginvsg2 <- gammah/sg2; # gammah*S_1^(-2)
Ginvsg1G1 <- Gammah/(se1*se2); # Gammah*S_1^(-1)*S_2^(-1)
ginvsg1G1 <- gammah/(se1*se2); # gammah*S_1^(-1)*S_2^(-1)
insGRinsG <- diag(1/se2)%*%R%*%diag(1/se2) # S_2^(-1)RS_2^(-1)
insgRinsg <- diag(1/se1)%*%R%*%diag(1/se1) # S_1^(-1)RS_1^(-1)
insgRinsG <- diag(1/se1)%*%R%*%diag(1/se2) # S_1^(-1)RS_2^(-1)
diaginsGRinsG <- diag(insGRinsG); #diag(S_2^(-1)RS_2^(-1))
diaginsgRinsg <- diag(insgRinsg); # diag(S_1^(-1)RS_1^(-1))
RinsginsG <- diag(R)/(se1*se2); # diag(S_1^(-1)RS_2^(-1))
Rins <- R%*%(diag(1/se1)); # RS_1^{-1}
Rins2 <- R%*%(diag(1/se2)); # RS_2^{-1}
Rinsgmu <- Rins%*%mu; # RS_1^{-1}gamma
RinsGmu <- Rins2%*%mu; # RS_2^{-1}gamma
RinsGmuA <- Rins2%*%muA; # RS_2^{-1}alpha
iR = solve(R);
# iSiRiS1 = diag(1/se1)%*%iR%*%diag(1/se1);
# iSiRiS2 = diag(1/se2)%*%iR%*%diag(1/se2);
# iSiRiS12 = diag(1/se1)%*%iR%*%diag(1/se2);
#
# ghiSiRiSgh = gammah%*%iSiRiS1%*%gammah;
# GhiSiRiSGh = Gammah%*%iSiRiS2%*%Gammah;
# ghiSiRiSGh = gammah%*%iSiRiS12%*%Gammah;
zhat = cbind(diag(1/se1)%*%gammah, diag(1/se2)%*%Gammah);
Reinv <- diag(2);
iter = 1;
# U = runif(IterMax, min = 0, max = 1);
while(iter<=IterMax){
inrho2 <- 1. / (1 - rho^2);
#update gamma
v2 = 1./(inrho2*diaginsgRinsg + inrho2*beta0^2*diaginsGRinsG - 2*inrho2*rho*beta0*RinsginsG + 1./sgga2);
for(j in 1:p){
tmp1 = Rinsgmu - Rins[, j]*mu[j];
tmp2 = RinsGmu - Rins2[, j]*mu[j];
RinSmujj = Rinsgmu[j] - R[j, j]*mu[j] / se1[j];
RinSmujj2 = RinsGmu[j] - R[j, j]*mu[j] / se2[j];
mu1 = ginvsg2[j] + beta0*GinvsG2[j] - rho*Ginvsg1G1[j] - rho*beta0*ginvsg1G1[j] + (rho/se1[j] - beta0/se2[j])*RinsGmuA[j];
mu2 = (rho*beta0/se2[j] - 1/se1[j])*RinSmujj + (rho*beta0/se1[j] - beta0^2/se2[j])*RinSmujj2;
mu0 = inrho2*(mu1 + mu2)*v2[j];
mu[j] = rnorm(1, mean = mu0, sd = sqrt(v2[j]));
# mu[j] = mu0;
Rinsgmu = tmp1 + Rins[, j]*mu[j];
RinsGmu = tmp2 + Rins2[, j]*mu[j];
}
# update alpha
v2A = 1./(inrho2*diaginsGRinsG + 1./sgal2);
for(k in 1:p){
tmp3 = RinsGmuA - Rins2[, k]*muA[k];
RinSmuAkk = RinsGmuA[k] - R[k, k]*muA[k]/se2[k];
muA1 = GinvsG2[k] - beta0/se2[k]*RinsGmu[k] - rho*ginvsg1G1[k] + rho/se2[k]*Rinsgmu[k];
muA2 = 1./se2[k]*RinSmuAkk;
muA0 = inrho2*(muA1 - muA2)*v2A[k];
muA[k] = rnorm(1, mean = muA0, sd = sqrt(v2A[k]));
# muA[k] = muA0;
RinsGmuA = tmp3 + Rins2[, k]*muA[k];
}
# update beta0
sig2b = 1./(t(mu)%*%insGRinsG%*%mu);
mub = (t(GinvsG2)%*%mu - t(muA)%*%insGRinsG%*%mu - rho*ginvsg1G1%*%mu + rho*t(mu)%*%insgRinsG%*%mu)*sig2b;
beta0 = rnorm(1, mean = mub, sd = sqrt(sig2b));
Betares[iter] <- beta0;
beta0 = as.numeric(mub);
# update sgga2
tagm <- agm + p/2;
tbgm <- sum(mu^2)/2 + bgm;
sgga2 <- rgamma(1, shape = tagm, scale = 1 / tbgm)^{-1};
# update sgal2
taal = aal + p/2;
tbal = sum(muA^2)/2 + bgm;
sgal2 =  rgamma(1, shape = taal, scale = 1 / tbal)^{-1};
if(constr==1){
rho = rhotrue;
}else{
# Parameter Expansion
# Sample D from the prior
id2 <- rgamma(2, shape = (2+1)/2, scale = 2/diag(Reinv))
D <- diag(1/sqrt(id2))
# # sample Re
zmean = cbind(Rinsgmu, beta0*RinsGmu + RinsGmuA);
tmp = (zhat - zmean)%*%D;
S = diag(2) + t(tmp)%*%iR%*%tmp;
v <-  2 + p;
Sig <- riwish(v, S)
D <- diag(sqrt(diag(Sig)))
Dinv <- solve(D)
Re <- Dinv%*%Sig%*%Dinv;
Reinv <- D%*%solve(Sig)%*%D
# compute rho
rho = Re[1, 2];
}
rhores[iter] = rho;
iter <- iter + 1;
# print(iter)
}
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
n = 50;
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
mu = 0;
sigma =1;
a = 0.1;
n = 50;
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
xtrun
mean(x)
sg(x)
sd(x)
n = 500;
x = rnorm(n, mean = mu, sd = sigma);
mean(x)
mu = 1;
sigma =1;
a = 0.1;
n = 500;
x = rnorm(n, mean = mu, sd = sigma);
mean(x)
sd(x)
legnth(xtrun)
length(xtrun)
mean(xtrun)
alpha = (a - mu)/sigma;
dnorm(alpha, mean = mu, sd = sigma)
dnorm(alpha, mean = mu, sd = sigma)
dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
pnorm(alpha, mean = mu, sd = sigma)
1 - pnorm(alpha, mean = mu, sd = sigma)
a = 0;
n = 500;
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
length(xtrun)
mean(xtrun)
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
mutrun
sig2 = sigma^2*(1-delta);
sig2
sigma(xtrun)
sd(xtrun)
sigtrun = sqrt(sigma^2*(1-delta));
sigtrun
n = 500;
nrep = 100;
muhat = sighat = matrix(0, nrow = nrep, ncol = 2);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i, 1] = mean(xtrun)
sighat[i, 1] = sd(xtrun)
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
muhat[i, 2] = mu + sigma*lambda;
sighat[i, 2] = sigtrun = sqrt(sigma^2*(1-delta));
}
boxplot(muhat)
muhat
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i, 1] = mean(xtrun)
sighat[i, 1] = sd(xtrun)
}
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
n = 1000;
nrep = 100;
muhat = sighat = rep(0, 0);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i, 1] = mean(xtrun)
sighat[i, 1] = sd(xtrun)
}
nrep = 100;
muhat = sighat = rep(0, nrep);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i] = mean(xtrun)
sighat[i] = sd(xtrun)
}
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
boxplot(muhat)
mutrun
abline(v = mutrun, color = red)
abline(h = mutrun, color = "red")
abline(h = mutrun, col = "red")
mutrun
mutrun = mu + sigma*lambda;
mutrun
boxplot(muhat)
abline(h = mutrun, col = "red")
a = 0;
n = 2000;
nrep = 100;
muhat = sighat = rep(0, nrep);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i] = mean(xtrun)
sighat[i] = sd(xtrun)
}
boxplot(muhat)
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
mutrun
mu = 0;
sigma =1;
a = 0;
n = 2000;
nrep = 100;
muhat = sighat = rep(0, nrep);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i] = mean(xtrun)
sighat[i] = sd(xtrun)
}
boxplot(muhat)
xtrun
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
mutrun
alpha
alpha = (mu - a)/sigma
alpha
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
mutrun
boxplot(muhat)
abline(h = mutrun, col = "red")
boxplot(sighat)
abline(h = mutrun, col = "red")
abline(h = sigturn, col = "red")
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
boxplot(sighat)
abline(h = sigturn, col = "red")
abline(h = sigtrun, col = "red")
boxplot(sighat)
abline(h = sigtrun, col = "red")
par(mfrow = c(1, 2))
boxplot(muhat)
abline(h = mutrun, col = "red")
boxplot(sighat)
abline(h = sigtrun, col = "red")
mu = 4;
sigma =5;
a = 0;
n = 2000;
nrep = 100;
muhat = sighat = rep(0, nrep);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i] = mean(xtrun)
sighat[i] = sd(xtrun)
}
alpha = (mu - a)/sigma
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
par(mfrow = c(1, 2))
boxplot(muhat)
abline(h = mutrun, col = "red")
boxplot(sighat)
abline(h = sigtrun, col = "red")
mutrun
sigtrun
xtrun
length(xtrun)
mu = 4;
sigma =5;
a = 2;
n = 2000;
nrep = 100;
muhat = sighat = rep(0, nrep);
for(i in 1:nrep){
x = rnorm(n, mean = mu, sd = sigma);
xtrun = x[x>a];
muhat[i] = mean(xtrun)
sighat[i] = sd(xtrun)
}
alpha = (mu - a)/sigma
lambda = dnorm(alpha, mean = mu, sd = sigma)/(1 - pnorm(alpha, mean = mu, sd = sigma))
delta = lambda*(lambda - alpha);
mutrun = mu + sigma*lambda;
sigtrun = sigtrun = sqrt(sigma^2*(1-delta));
par(mfrow = c(1, 2))
boxplot(muhat)
abline(h = mutrun, col = "red")
boxplot(sighat)
abline(h = sigtrun, col = "red")
mutrun
sigtrun
setwd("F:/share/Nutstore/revise/simulationCode/code/MDIS")
compileAttributes(verbose=TRUE)
library(Rcpp);
library(RcppArmadillo);
compileAttributes(verbose=TRUE)
